// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: message/block_storage.proto

package message

import (
	context "context"
	message "github.com/ISSuh/sos/domain/model/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockStorageClient is the client API for BlockStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockStorageClient interface {
	Put(ctx context.Context, in *message.Block, opts ...grpc.CallOption) (*StorageResponse, error)
	GetBlock(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*message.Block, error)
	GetBlockHeader(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*message.BlockHeader, error)
	Delete(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*StorageResponse, error)
}

type blockStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockStorageClient(cc grpc.ClientConnInterface) BlockStorageClient {
	return &blockStorageClient{cc}
}

func (c *blockStorageClient) Put(ctx context.Context, in *message.Block, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/rpcmessage.BlockStorage/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockStorageClient) GetBlock(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*message.Block, error) {
	out := new(message.Block)
	err := c.cc.Invoke(ctx, "/rpcmessage.BlockStorage/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockStorageClient) GetBlockHeader(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*message.BlockHeader, error) {
	out := new(message.BlockHeader)
	err := c.cc.Invoke(ctx, "/rpcmessage.BlockStorage/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockStorageClient) Delete(ctx context.Context, in *message.BlockHeader, opts ...grpc.CallOption) (*StorageResponse, error) {
	out := new(StorageResponse)
	err := c.cc.Invoke(ctx, "/rpcmessage.BlockStorage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockStorageServer is the server API for BlockStorage service.
// All implementations must embed UnimplementedBlockStorageServer
// for forward compatibility
type BlockStorageServer interface {
	Put(context.Context, *message.Block) (*StorageResponse, error)
	GetBlock(context.Context, *message.BlockHeader) (*message.Block, error)
	GetBlockHeader(context.Context, *message.BlockHeader) (*message.BlockHeader, error)
	Delete(context.Context, *message.BlockHeader) (*StorageResponse, error)
	mustEmbedUnimplementedBlockStorageServer()
}

// UnimplementedBlockStorageServer must be embedded to have forward compatible implementations.
type UnimplementedBlockStorageServer struct {
}

func (UnimplementedBlockStorageServer) Put(context.Context, *message.Block) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedBlockStorageServer) GetBlock(context.Context, *message.BlockHeader) (*message.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockStorageServer) GetBlockHeader(context.Context, *message.BlockHeader) (*message.BlockHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedBlockStorageServer) Delete(context.Context, *message.BlockHeader) (*StorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlockStorageServer) mustEmbedUnimplementedBlockStorageServer() {}

// UnsafeBlockStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockStorageServer will
// result in compilation errors.
type UnsafeBlockStorageServer interface {
	mustEmbedUnimplementedBlockStorageServer()
}

func RegisterBlockStorageServer(s grpc.ServiceRegistrar, srv BlockStorageServer) {
	s.RegisterService(&BlockStorage_ServiceDesc, srv)
}

func _BlockStorage_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStorageServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.BlockStorage/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStorageServer).Put(ctx, req.(*message.Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockStorage_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.BlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStorageServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.BlockStorage/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStorageServer).GetBlock(ctx, req.(*message.BlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockStorage_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.BlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStorageServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.BlockStorage/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStorageServer).GetBlockHeader(ctx, req.(*message.BlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockStorage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.BlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.BlockStorage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStorageServer).Delete(ctx, req.(*message.BlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockStorage_ServiceDesc is the grpc.ServiceDesc for BlockStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcmessage.BlockStorage",
	HandlerType: (*BlockStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _BlockStorage_Put_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockStorage_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _BlockStorage_GetBlockHeader_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BlockStorage_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/block_storage.proto",
}
