// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: message/metadata_registry.proto

package message

import (
	context "context"
	message "github.com/ISSuh/sos/domain/model/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataRegistryClient is the client API for MetadataRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataRegistryClient interface {
	Put(ctx context.Context, in *message.Object, opts ...grpc.CallOption) (*message.ObjectMetadata, error)
	Delete(ctx context.Context, in *message.ObjectMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByObjectName(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadata, error)
	GetByObjectID(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadata, error)
	FindMetadataOnPath(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadataList, error)
}

type metadataRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataRegistryClient(cc grpc.ClientConnInterface) MetadataRegistryClient {
	return &metadataRegistryClient{cc}
}

func (c *metadataRegistryClient) Put(ctx context.Context, in *message.Object, opts ...grpc.CallOption) (*message.ObjectMetadata, error) {
	out := new(message.ObjectMetadata)
	err := c.cc.Invoke(ctx, "/rpcmessage.MetadataRegistry/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRegistryClient) Delete(ctx context.Context, in *message.ObjectMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rpcmessage.MetadataRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRegistryClient) GetByObjectName(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadata, error) {
	out := new(message.ObjectMetadata)
	err := c.cc.Invoke(ctx, "/rpcmessage.MetadataRegistry/GetByObjectName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRegistryClient) GetByObjectID(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadata, error) {
	out := new(message.ObjectMetadata)
	err := c.cc.Invoke(ctx, "/rpcmessage.MetadataRegistry/GetByObjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataRegistryClient) FindMetadataOnPath(ctx context.Context, in *ObjectMetadataRequest, opts ...grpc.CallOption) (*message.ObjectMetadataList, error) {
	out := new(message.ObjectMetadataList)
	err := c.cc.Invoke(ctx, "/rpcmessage.MetadataRegistry/FindMetadataOnPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataRegistryServer is the server API for MetadataRegistry service.
// All implementations must embed UnimplementedMetadataRegistryServer
// for forward compatibility
type MetadataRegistryServer interface {
	Put(context.Context, *message.Object) (*message.ObjectMetadata, error)
	Delete(context.Context, *message.ObjectMetadata) (*emptypb.Empty, error)
	GetByObjectName(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadata, error)
	GetByObjectID(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadata, error)
	FindMetadataOnPath(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadataList, error)
	mustEmbedUnimplementedMetadataRegistryServer()
}

// UnimplementedMetadataRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataRegistryServer struct {
}

func (UnimplementedMetadataRegistryServer) Put(context.Context, *message.Object) (*message.ObjectMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedMetadataRegistryServer) Delete(context.Context, *message.ObjectMetadata) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetadataRegistryServer) GetByObjectName(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByObjectName not implemented")
}
func (UnimplementedMetadataRegistryServer) GetByObjectID(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByObjectID not implemented")
}
func (UnimplementedMetadataRegistryServer) FindMetadataOnPath(context.Context, *ObjectMetadataRequest) (*message.ObjectMetadataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMetadataOnPath not implemented")
}
func (UnimplementedMetadataRegistryServer) mustEmbedUnimplementedMetadataRegistryServer() {}

// UnsafeMetadataRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataRegistryServer will
// result in compilation errors.
type UnsafeMetadataRegistryServer interface {
	mustEmbedUnimplementedMetadataRegistryServer()
}

func RegisterMetadataRegistryServer(s grpc.ServiceRegistrar, srv MetadataRegistryServer) {
	s.RegisterService(&MetadataRegistry_ServiceDesc, srv)
}

func _MetadataRegistry_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRegistryServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.MetadataRegistry/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRegistryServer).Put(ctx, req.(*message.Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.MetadataRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRegistryServer).Delete(ctx, req.(*message.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRegistry_GetByObjectName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRegistryServer).GetByObjectName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.MetadataRegistry/GetByObjectName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRegistryServer).GetByObjectName(ctx, req.(*ObjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRegistry_GetByObjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRegistryServer).GetByObjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.MetadataRegistry/GetByObjectID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRegistryServer).GetByObjectID(ctx, req.(*ObjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataRegistry_FindMetadataOnPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataRegistryServer).FindMetadataOnPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmessage.MetadataRegistry/FindMetadataOnPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataRegistryServer).FindMetadataOnPath(ctx, req.(*ObjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataRegistry_ServiceDesc is the grpc.ServiceDesc for MetadataRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcmessage.MetadataRegistry",
	HandlerType: (*MetadataRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _MetadataRegistry_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetadataRegistry_Delete_Handler,
		},
		{
			MethodName: "GetByObjectName",
			Handler:    _MetadataRegistry_GetByObjectName_Handler,
		},
		{
			MethodName: "GetByObjectID",
			Handler:    _MetadataRegistry_GetByObjectID_Handler,
		},
		{
			MethodName: "FindMetadataOnPath",
			Handler:    _MetadataRegistry_FindMetadataOnPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/metadata_registry.proto",
}
